import * as tailwindConfigObject from '../../tailwindObject.json';
export default interface Styles extends Utility, MediaQuery, Events {
}
export declare type Colors = keyof typeof tailwindConfigObject.theme.colors | null;
export declare type ColorVariants = keyof typeof tailwindConfigObject.theme.colors.gray | null;
export declare type BorderWidth = keyof typeof tailwindConfigObject.theme.borderWidth;
export declare type Spacing = keyof typeof tailwindConfigObject.theme.gap;
export declare type Opacity = keyof typeof tailwindConfigObject.theme.opacity;
export declare type BackgroundSize = keyof typeof tailwindConfigObject.theme.backgroundSize;
export declare type BackgroundPosition = keyof typeof tailwindConfigObject.theme.backgroundPosition;
export declare type Margin = keyof typeof tailwindConfigObject.theme.margin;
export declare type Padding = keyof typeof tailwindConfigObject.theme.padding;
export interface Background {
    color?: Colors;
    variant?: ColorVariants;
    opacity?: Opacity;
    size?: BackgroundSize;
    position?: BackgroundPosition;
}
export interface Border {
    color?: Colors;
    variant?: ColorVariants;
    top?: BorderWidth;
    right?: BorderWidth;
    bottom?: BorderWidth;
    left?: BorderWidth;
    width?: BorderWidth;
    style?: 'solid' | 'dashed' | 'dotted' | 'double' | 'none';
    opacity?: Opacity;
}
export declare type BorderRadius = 'base' | 'none' | 'sm' | 'md' | 'lg' | 'full' | 't-none' | 'r-none' | 'b-none' | 'l-none' | 't-sm' | 'r-sm' | 'b-sm' | 'l-sm' | 't' | 'r' | 'b' | 'l' | 't-md' | 'r-md' | 'b-md' | 'l-md' | 't-lg' | 'r-lg' | 'b-lg' | 'l-lg' | 't-full' | 'r-full' | 'b-full' | 'l-full' | 'tl-none' | 'tr-none' | 'br-none' | 'bl-none' | 'tl-sm' | 'tr-sm' | 'br-sm' | 'bl-sm' | 'tl' | 'tr' | 'br' | 'bl' | 'tl-md' | 'tr-md' | 'br-md' | 'bl-md' | 'tl-lg' | 'tr-lg' | 'br-lg' | 'bl-lg' | 'tl-full' | 'tr-full' | 'br-full' | 'bl-full';
export interface Space {
    x?: Spacing;
    y?: Spacing;
}
export interface Text {
    size?: keyof typeof tailwindConfigObject.theme.fontSize;
    color?: Colors;
    variant?: ColorVariants;
    align?: 'left' | 'right' | 'center' | 'justify';
    decoration?: 'underline' | 'line-through' | 'no-underline';
    transform?: 'uppercase' | 'lowercase' | 'capitalize' | 'normal-case';
    spacing?: keyof typeof tailwindConfigObject.theme.letterSpacing;
    leading?: keyof typeof tailwindConfigObject.theme.lineHeight;
    whitespace?: 'normal' | 'nowrap' | 'pre' | 'pre-line' | 'pre-wrap';
    wordbreak?: 'normal' | 'words' | 'all' | 'truncate';
    opacity?: Opacity;
}
export interface Font {
    weight?: keyof typeof tailwindConfigObject.theme.fontWeight;
    family?: keyof typeof tailwindConfigObject.theme.fontFamily;
    style?: 'italic' | 'not-italic';
    smoothing?: 'antialiased' | 'subpixel-antialiased';
}
export interface Flex {
    direction?: 'row' | 'row-reverse' | 'col' | 'col-reverse';
    wrap?: 'nowrap' | 'wrap' | 'wrap-reverse';
    align?: 'stretch' | 'start' | 'center' | 'end' | 'baseline';
    justify?: 'start' | 'center' | 'end' | 'between' | 'around';
    flex?: 'initial' | '1' | 'auto' | 'none';
}
export declare type GridSix = '1' | '2' | '3' | '4' | '5' | '6';
export declare type GridTwelve = GridSix | '7' | '8' | '9' | '10' | '11' | '12';
export interface Grid {
    columns?: GridTwelve | 'none';
    rows?: GridSix | 'none';
    gap?: {
        x?: Spacing;
        y?: Spacing;
    };
    span?: {
        x?: GridTwelve;
        y?: GridSix;
    };
    start?: {
        x?: GridTwelve | '13' | 'auto';
        y?: GridSix | '7' | 'auto';
    };
    end?: {
        x?: GridTwelve | '13' | 'auto';
        y?: GridSix | '7' | 'auto';
    };
}
export declare type Placement = 'inset' | 'top' | 'right' | 'bottom' | 'left';
export declare type Inset = keyof typeof tailwindConfigObject.theme.inset;
export declare type BoxModel = {
    top: Spacing;
    right: Spacing;
    bottom: Spacing;
    left: Spacing;
};
export declare type Overflow = 'auto' | 'hidden' | 'visible' | 'scroll';
export interface Utility {
    position?: 'static' | 'fixed' | 'absolute' | 'relative' | 'sticky';
    display?: 'hidden' | 'block' | 'inline-block' | 'inline' | 'flex' | 'inline-flex' | 'grid' | 'inline-grid' | 'table' | 'table-caption' | 'table-cell' | 'flow-root';
    flex?: Flex;
    grid?: Grid;
    cursor?: 'auto' | 'default' | 'pointer' | 'wait' | 'text' | 'move' | 'not-allowed';
    width?: keyof typeof tailwindConfigObject.theme.width;
    height?: keyof typeof tailwindConfigObject.theme.height;
    maxWidth?: keyof typeof tailwindConfigObject.theme.maxWidth;
    maxHeight?: keyof typeof tailwindConfigObject.theme.maxHeight;
    background?: Colors | Background;
    text?: Text;
    font?: Font;
    margin?: {
        top?: Margin;
        right?: Margin;
        bottom?: Margin;
        left?: Margin;
        x?: Margin;
        y?: Margin;
        all?: Margin;
    };
    padding?: {
        top?: Padding;
        right?: Padding;
        bottom?: Padding;
        left?: Padding;
        x?: Padding;
        y?: Padding;
        all?: Padding;
    };
    opacity?: Opacity;
    border?: Border;
    space?: Space;
    table?: 'auto' | 'fixed';
    pointerEvents?: 'none' | 'auto';
    placeholder?: {
        color: Colors;
        variant?: ColorVariants;
    };
    placeholderOpacity?: keyof typeof tailwindConfigObject.theme.placeholderOpacity;
    shadow?: keyof typeof tailwindConfigObject.theme.boxShadow;
    rounded?: BorderRadius | BorderRadius[];
    zIndex?: keyof typeof tailwindConfigObject.theme.zIndex;
    placement?: {
        position: Placement;
        inset: Inset;
    };
    overflow?: {
        x: Overflow;
        y: Overflow;
        all: Overflow;
    };
}
export interface Events {
    hover?: Utility;
    active?: Utility;
    focus?: Utility;
}
export interface MediaQuery {
    sm?: Utility;
    md?: Utility;
    lg?: Utility;
    xl?: Utility;
}
